name: v2ray-ngrok

on:
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:

jobs:
  v2ray-ngrok:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get dist-upgrade
          sudo apt-get install -y curl socat jq

      - name: Setup ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get install ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok tcp --region=ap 10086 &

      - name: Show ngrok link
        run: |
          ngrok_address=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | awk -F'[:/]' '{print $4 ":" $5}')
          echo $ngrok_address
          # ngrok_ip=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | awk -F'[:/]' '{print $4}')
          # ngrok_port=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | awk -F'[:/]' '{print $5}')
          # echo "NGROK_IP=$ngrok_ip" >> $GITHUB_ENV
          # echo "NGROK_PORT=$ngrok_port" >> $GITHUB_ENV
          # echo "${{ env.NGROK_IP }}:${{ env.NGROK_PORT }}"
          echo "NGROK_IP=$(echo $ngrok_address | cut -d: -f1)" >> $GITHUB_ENV
          echo "NGROK_PORT=$(echo $ngrok_address | cut -d: -f2)" >> $GITHUB_ENV

      - name: Install v2ray
        run: |
          # 安裝執行檔和 .dat 資料檔 https://github.com/v2fly/fhs-install-v2ray
          curl -s https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh | sudo bash
          sudo mkdir -p /usr/local/etc/v2ray

      - name: Setup default vmess config files
        run: |
          sudo sh -c 'cat << EOF > "/usr/local/etc/v2ray/config.json"
          {
              "inbounds": [
                  {
                      "port": 10086,
                      "protocol": "vmess",
                      "settings": {
                          "clients": [
                              {
                                  "id": "b831381d-6324-4d53-ad4f-8cda48b30811"
                              }
                          ]
                      }
                  }
              ],
              "outbounds": [
                  {
                      "protocol": "freedom"
                  }
              ]
          }
          EOF'
          sudo sh -c 'cat << EOF > "config.json"
          {
              "inbounds": [
                  {
                      "port": 1080,
                      "listen": "127.0.0.1",
                      "protocol": "socks",
                      "settings": {
                          "udp": true
                      }
                  }
              ],
              "outbounds": [
                  {
                      "protocol": "vmess",
                      "settings": {
                          "vnext": [
                              {
                                  "address": "${{ env.NGROK_IP }}",
                                  "port": ${{ env.NGROK_PORT }},
                                  "users": [
                                      {
                                          "id": "b831381d-6324-4d53-ad4f-8cda48b30811"
                                      }
                                  ]
                              }
                          ]
                      }
                  },
                  {
                      "protocol": "freedom",
                      "tag": "direct"
                  }
              ],
              "routing": {
                  "domainStrategy": "IPOnDemand",
                  "rules": [
                      {
                          "type": "field",
                          "ip": [
                              "geoip:private"
                          ],
                          "outboundTag": "direct"
                      }
                  ]
              }
          }
          EOF'

      - name: Creating uuid config
        run: |
          for ((i = 1; i <= 10; i++)); do
              uuid=$(v2ray uuid)
              echo $uuid
              jq --arg uuid_tmp "$uuid" '.inbounds[0].settings.clients += [{"id": $uuid_tmp}]' /usr/local/etc/v2ray/config.json > /usr/local/etc/v2ray/config.json
              cp config.json config_$i.json
              jq --arg uuid_tmp "$uuid" '.outbounds[0].settings.vnext[0].users[0].id = $uuid_tmp' config_$i.json > config_$i.json
          done

      - name: Run v2ray
        run: |
          nohup v2ray run &
          ps -o pid,command

      - name: Automatic Releases
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "v1.0.0"
          # draft: "false"
          prerelease: "false" # default is true
          # title: "v2ray client json files"
          files: |
            *.json

      - name: Keep Alive
        run: |
          sleep 60m
